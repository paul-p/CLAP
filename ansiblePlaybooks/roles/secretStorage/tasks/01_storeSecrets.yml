# The playbook provides information it asked to the user
# * awx_username
# * awx_password
# * keepassxc_password
# This role checks password confirmation

# Then it generates automatically some secrets
# * secret_key 
# * pg_password

# Then generate SSH key pair with passphrase for admin and one for guests: TODO

# It finally store all secrets in a keypass file (TODO: Add the 2 passphrases)
- name: KeepassXC password
  pause:
    prompt: "Entrez le mot de passe souhaité pour le fichier keepassXC dans lequel seront stockés les autres mots de passe"
    echo: no
  register: keepassxc_password_input

- name: KeepassXC password confirmation
  pause:
    prompt: "Confirmez ce mot de passe"
    echo: no
  register: keepassxc_password_confirm_input

- name: AWX username
  pause:
    prompt: "Entrez le nom d'utilisateur souhaité pour le serveur awx"
    echo: yes
  register: awx_username_input

- name: AWX password
  pause:
    prompt: "Entrez le mot de passe souhaité pour l'accès au server awx"
    echo: no
  register: awx_password_input

- name: AWX password confirmation
  pause:
    prompt: "Confirmez ce mot de passe"
    echo: no
  register: awx_password_confirm_input

- name: Generation of credentials (pg_password and awx_secret_key)
  set_fact:
    keepassxc_password: "{{ keepassxc_password_input.user_input }}"
    keepassxc_password_confirm: "{{ keepassxc_password_confirm_input.user_input }}"
    awx_username: "{{ awx_username_input.user_input }}"
    awx_password: "{{ awx_password_input.user_input }}"
    awx_password_confirm: "{{ awx_password_confirm_input.user_input }}"
    awx_secret_key: "{{ lookup('password', '/dev/null chars=ascii_lowercase,digits length=8') }}"
    pg_password: "{{ lookup('password', '/dev/null chars=ascii_lowercase,digits length=8') }}"

- name: Check awx_password and awx_password_confirm match
  debug: msg="Les mots de passe AWX ne correspondent pas"
  when: awx_password != awx_password_confirm
  failed_when: awx_password != awx_password_confirm

- name: Check keepassxc_password and keepassxc_password_confirm match
  debug: msg="Les mots de passe ne correspondent pas"
  when: keepassxc_password != keepassxc_password_confirm
  failed_when: keepassxc_password != keepassxc_password_confirm

- name: Create directory for keepassFile
  file:
    path: "{{ keepassFilePath }}"
    state: directory
    mode: '0755'
    owner: "{{ ansible_user_id }}"
    group: "{{ ansible_user_id }}"
  become: true

- name: Add keepassxc repository into sources list
  apt_repository:
    repo: ppa:phoerious/keepassxc
    state: present
  become: true

- name: Install dependencies  
  apt:
    pkg:
      - python
      - python-pip
      - keepassxc
    state: latest
    update_cache: true
  become: true

- name: Install pexpect python module
  command: pip install pexpect
  become: true

- name: Create a keepass container
  expect:
    command: "keepassxc-cli db-create {{ keepassFilePath }}/{{ keepassFile }} -p"
    responses:
      '(.*)Enter password to encrypt database(.*)': "{{ keepassxc_password}}"
      '(.*)Repeat password(.*)': "{{ keepassxc_password}}"
  no_log: true

- name: Add awx password in the keepass container
  expect:
    command: "keepassxc-cli add -u {{ awx_username }} -p --url http://localhost:{{ host_port }} {{ keepassFilePath }}/{{ keepassFile }} awx"
    responses:
      '(.*)Enter password to unlock(.*)': "{{ keepassxc_password}}"
      '(.*)Enter password for new entry(.*)': "{{ awx_password }}"
  no_log: true

- name: Add PG password in the keepass container
  expect:
    command: "keepassxc-cli add -u {{ pg_username }} -p {{ keepassFilePath }}/{{ keepassFile }} pg"
    responses:
      '(.*)Enter password to unlock(.*)': "{{ keepassxc_password}}"
      '(.*)Enter password for new entry(.*)': "{{ pg_password }}"
  no_log: true

- name: Add AWX secret in the keepass container
  expect:
    command: "keepassxc-cli add -p {{ keepassFilePath }}/{{ keepassFile }} AWX_secret"
    responses:
      '(.*)Enter password to unlock(.*)': "{{ keepassxc_password}}"
      '(.*)Enter password for new entry(.*)': "{{ awx_secret_key }}"
  no_log: true


